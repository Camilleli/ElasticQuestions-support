# ----------------------------------------------------------------------------
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml
#
# ----------------------------------------------------------------------------

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code using: baml-cli generate
# baml-cli is available with the baml package.

import typing
import typing_extensions
from enum import Enum


from pydantic import BaseModel, ConfigDict


import baml_py

CheckT = typing_extensions.TypeVar('CheckT')
CheckName = typing_extensions.TypeVar('CheckName', bound=str)

class Check(BaseModel):
    name: str
    expression: str
    status: str
class Checked(BaseModel, typing.Generic[CheckT, CheckName]):
    value: CheckT
    checks: typing.Dict[CheckName, Check]

def get_checks(checks: typing.Dict[CheckName, Check]) -> typing.List[Check]:
    return list(checks.values())

def all_succeeded(checks: typing.Dict[CheckName, Check]) -> bool:
    return all(check.status == "succeeded" for check in get_checks(checks))
# #########################################################################
# Generated enums (1)
# #########################################################################

class Category(str, Enum):
    QUERY_DSL = "QUERY_DSL"
    AGGREGATIONS = "AGGREGATIONS"
    SCRIPTING = "SCRIPTING"

# #########################################################################
# Generated classes (5)
# #########################################################################

class ElasticMultipleTypeQuestion(BaseModel):
    question: str
    answer: str
    questionType: typing.Union[typing_extensions.Literal['mc'], typing_extensions.Literal['fill-in-the-blank']]

class ElasticMultipleTypeQuestionSet(BaseModel):
    questionClass: "ElasticMultipleTypeQuestion"
    validationClass: "ElasticMultipleTypeQuestionValidation"

class ElasticMultipleTypeQuestionValidation(BaseModel):
    isValid: typing.Union[typing_extensions.Literal[True], typing_extensions.Literal[False]]
    reason: str
    location: str

class ElasticQuestion(BaseModel):
    category: Category
    question: str
    endpoint: str
    method: typing.Union[typing_extensions.Literal['GET'], typing_extensions.Literal['POST'], typing_extensions.Literal['PUT'], typing_extensions.Literal['DELETE']]
    answer: str

class ElasticSet(BaseModel):
    corpus: "ElasticQuestion"
    rating: typing.Union[typing_extensions.Literal['Good'], typing_extensions.Literal['Bad']]

# #########################################################################
# Generated type aliases (0)
# #########################################################################
