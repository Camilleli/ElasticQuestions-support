###############################################################################
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml-py
#
###############################################################################

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code.
#
# ruff: noqa: E501,F401
# flake8: noqa: E501,F401
# pylint: disable=unused-import,line-too-long
# fmt: off
import typing
from baml_py.baml_py import FieldType, EnumValueBuilder, EnumBuilder, ClassBuilder
from baml_py.type_builder import TypeBuilder as _TypeBuilder, ClassPropertyBuilder, ClassPropertyViewer, EnumValueViewer
from .globals import DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_RUNTIME


class TypeBuilder(_TypeBuilder):
    def __init__(self):
        super().__init__(classes=set(
          ["ElasticQuestion","ElasticSet",]
        ), enums=set(
          ["Category",]
        ), runtime=DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_RUNTIME)


    @property
    def ElasticQuestion(self) -> "ElasticQuestionAst":
        return ElasticQuestionAst(self)

    @property
    def ElasticSet(self) -> "ElasticSetAst":
        return ElasticSetAst(self)





class ElasticQuestionAst:
    def __init__(self, tb: _TypeBuilder):
        _tb = tb._tb # type: ignore (we know how to use this private attribute)
        self._bldr = _tb.class_("ElasticQuestion")
        self._properties: typing.Set[str] = set([ "category",  "question",  "endpoint",  "method",  "answer", ])
        self._props = ElasticQuestionProperties(self._bldr, self._properties)

    def type(self) -> FieldType:
        return self._bldr.field()

    @property
    def props(self) -> "ElasticQuestionProperties":
        return self._props


class ElasticQuestionViewer(ElasticQuestionAst):
    def __init__(self, tb: _TypeBuilder):
        super().__init__(tb)

    
    def list_properties(self) -> typing.List[typing.Tuple[str, ClassPropertyViewer]]:
        return [(name, ClassPropertyViewer(self._bldr.property(name))) for name in self._properties]



class ElasticQuestionProperties:
    def __init__(self, bldr: ClassBuilder, properties: typing.Set[str]):
        self.__bldr = bldr
        self.__properties = properties

    

    @property
    def category(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("category"))

    @property
    def question(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("question"))

    @property
    def endpoint(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("endpoint"))

    @property
    def method(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("method"))

    @property
    def answer(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("answer"))

    

class ElasticSetAst:
    def __init__(self, tb: _TypeBuilder):
        _tb = tb._tb # type: ignore (we know how to use this private attribute)
        self._bldr = _tb.class_("ElasticSet")
        self._properties: typing.Set[str] = set([ "corpus",  "rating", ])
        self._props = ElasticSetProperties(self._bldr, self._properties)

    def type(self) -> FieldType:
        return self._bldr.field()

    @property
    def props(self) -> "ElasticSetProperties":
        return self._props


class ElasticSetViewer(ElasticSetAst):
    def __init__(self, tb: _TypeBuilder):
        super().__init__(tb)

    
    def list_properties(self) -> typing.List[typing.Tuple[str, ClassPropertyViewer]]:
        return [(name, ClassPropertyViewer(self._bldr.property(name))) for name in self._properties]



class ElasticSetProperties:
    def __init__(self, bldr: ClassBuilder, properties: typing.Set[str]):
        self.__bldr = bldr
        self.__properties = properties

    

    @property
    def corpus(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("corpus"))

    @property
    def rating(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("rating"))

    



class CategoryAst:
    def __init__(self, tb: _TypeBuilder):
        _tb = tb._tb # type: ignore (we know how to use this private attribute)
        self._bldr = _tb.enum("Category")
        self._values: typing.Set[str] = set([ "QUERY_DSL",  "AGGREGATIONS",  "MAPPING",  "INGEST",  "SCRIPTING", ])
        self._vals = CategoryValues(self._bldr, self._values)

    def type(self) -> FieldType:
        return self._bldr.field()

    @property
    def values(self) -> "CategoryValues":
        return self._vals


class CategoryViewer(CategoryAst):
    def __init__(self, tb: _TypeBuilder):
        super().__init__(tb)

    def list_values(self) -> typing.List[typing.Tuple[str, EnumValueViewer]]:
        return [(name, EnumValueViewer(self._bldr.value(name))) for name in self._values]


class CategoryValues:
    def __init__(self, enum_bldr: EnumBuilder, values: typing.Set[str]):
        self.__bldr = enum_bldr
        self.__values = values

    

    @property
    def QUERY_DSL(self) -> EnumValueViewer:
        return EnumValueViewer(self.__bldr.value("QUERY_DSL"))
    

    @property
    def AGGREGATIONS(self) -> EnumValueViewer:
        return EnumValueViewer(self.__bldr.value("AGGREGATIONS"))
    

    @property
    def MAPPING(self) -> EnumValueViewer:
        return EnumValueViewer(self.__bldr.value("MAPPING"))
    

    @property
    def INGEST(self) -> EnumValueViewer:
        return EnumValueViewer(self.__bldr.value("INGEST"))
    

    @property
    def SCRIPTING(self) -> EnumValueViewer:
        return EnumValueViewer(self.__bldr.value("SCRIPTING"))
    

    


__all__ = ["TypeBuilder"]