###############################################################################
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml-py
#
###############################################################################

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code.
#
# ruff: noqa: E501,F401
# flake8: noqa: E501,F401
# pylint: disable=unused-import,line-too-long
# fmt: off
from typing import Dict, List, Optional, Union
from typing_extensions import Literal

import baml_py

from . import _baml


class HttpRequest:
    __runtime: baml_py.BamlRuntime
    __ctx_manager: baml_py.BamlCtxManager

    def __init__(self, runtime: baml_py.BamlRuntime, ctx_manager: baml_py.BamlCtxManager):
      self.__runtime = runtime
      self.__ctx_manager = ctx_manager

    
    def GenerateElasticCertificationQuestion(
        self,
        subject: _baml.types.Category,index: str,mapping: str,data: str,context: List[_baml.types.ElasticSet],
        baml_options: _baml.BamlCallOptionsModApi = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)
      env = _baml.env_vars_to_dict(baml_options.get("env", {}))

      return self.__runtime.build_request_sync(
        "GenerateElasticCertificationQuestion",
        {
          "subject": subject,"index": index,"mapping": mapping,"data": data,"context": context,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        env,
        False,
      )
    
    def GenerateQuestionFromEnablementFile(
        self,
        enablementContent: str,questionBank: List[_baml.types.ElasticMultipleChooseSet],
        baml_options: _baml.BamlCallOptionsModApi = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)
      env = _baml.env_vars_to_dict(baml_options.get("env", {}))

      return self.__runtime.build_request_sync(
        "GenerateQuestionFromEnablementFile",
        {
          "enablementContent": enablementContent,"questionBank": questionBank,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        env,
        False,
      )
    
    def ValidateGeneratedQuestion(
        self,
        questionObject: _baml.types.ElasticMultipleChoose,enablementContent: str,
        baml_options: _baml.BamlCallOptionsModApi = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)
      env = _baml.env_vars_to_dict(baml_options.get("env", {}))

      return self.__runtime.build_request_sync(
        "ValidateGeneratedQuestion",
        {
          "questionObject": questionObject,"enablementContent": enablementContent,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        env,
        False,
      )
    


class HttpStreamRequest:
    __runtime: baml_py.BamlRuntime
    __ctx_manager: baml_py.BamlCtxManager

    def __init__(self, runtime: baml_py.BamlRuntime, ctx_manager: baml_py.BamlCtxManager):
      self.__runtime = runtime
      self.__ctx_manager = ctx_manager

    
    def GenerateElasticCertificationQuestion(
        self,
        subject: _baml.types.Category,index: str,mapping: str,data: str,context: List[_baml.types.ElasticSet],
        baml_options: _baml.BamlCallOptionsModApi = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)
      env = _baml.env_vars_to_dict(baml_options.get("env", {}))

      return self.__runtime.build_request_sync(
        "GenerateElasticCertificationQuestion",
        {
          "subject": subject,"index": index,"mapping": mapping,"data": data,"context": context,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        env,
        True,
      )
    
    def GenerateQuestionFromEnablementFile(
        self,
        enablementContent: str,questionBank: List[_baml.types.ElasticMultipleChooseSet],
        baml_options: _baml.BamlCallOptionsModApi = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)
      env = _baml.env_vars_to_dict(baml_options.get("env", {}))

      return self.__runtime.build_request_sync(
        "GenerateQuestionFromEnablementFile",
        {
          "enablementContent": enablementContent,"questionBank": questionBank,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        env,
        True,
      )
    
    def ValidateGeneratedQuestion(
        self,
        questionObject: _baml.types.ElasticMultipleChoose,enablementContent: str,
        baml_options: _baml.BamlCallOptionsModApi = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)
      env = _baml.env_vars_to_dict(baml_options.get("env", {}))

      return self.__runtime.build_request_sync(
        "ValidateGeneratedQuestion",
        {
          "questionObject": questionObject,"enablementContent": enablementContent,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        env,
        True,
      )
    


__all__ = ["HttpRequest", "HttpStreamRequest"]